{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elarvav\\\\Desktop\\\\marketplace\\\\client\\\\src\\\\components\\\\Services.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./services.scss\";\nimport axios from \"axios\";\nexport default function Services() {\n  const [services, setServices] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [fullDebt, setFullDebt] = useState(0);\n\n  const updatePricing = e => {\n    let newDebt = services.debt;\n    let time = new Date().getTime();\n    let updateService = {};\n\n    if (services.active) {\n      newDebt += (time - services.timeActivated) / 1000 * services.price;\n      updateService = {\n        active: !services.active,\n        debt: newDebt,\n        timeDeactivated: time\n      };\n    }\n\n    updateService = {\n      active: !services.active,\n      timeActivated: time\n    };\n    console.log(updateService);\n    axios.put(`/api/service/${services._id}`, updateService).then(res => {\n      console.log(res);\n      console.log(res.data);\n    });\n  }; //useEffect(() => {\n  //  const intervalId = setInterval(() => {\n  //    let currentDebt = pricing.reduce((a, b) => ({ debt: a.debt + b.debt }));\n  //    currentDebt = currentDebt.debt;\n  //    pricing.map((price, index) => {\n  //      if (price.time && price.active) {\n  //        currentDebt +=\n  //          ((new Date().getTime() - price.time) / 1000) *\n  //          services[index].price;\n  //      }\n  //    });\n  //    setFullDebt(Math.round((currentDebt + Number.EPSILON) * 100) / 100);\n  //  }, 5000);\n  //  return () => clearInterval(intervalId);\n  //});\n\n\n  useEffect(() => {\n    fetch(\"/api/service\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setServices(result);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 12\n      }\n    }, \"Error: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Services\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"Loading...\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"Services\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"Current debt: Placeholder$\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, services.map((service, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: service.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, service.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, service.description, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 19\n      }\n    }), service.metrics, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }), service.price, \" $ per hour\", \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: updatePricing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, service.active ? \"Disable\" : \"Activate\")))))));\n  }\n}","map":{"version":3,"sources":["C:/Users/elarvav/Desktop/marketplace/client/src/components/Services.js"],"names":["React","useState","useEffect","axios","Services","services","setServices","isLoaded","setIsLoaded","error","setError","fullDebt","setFullDebt","updatePricing","e","newDebt","debt","time","Date","getTime","updateService","active","timeActivated","price","timeDeactivated","console","log","put","_id","then","res","data","fetch","json","result","message","map","service","index","name","description","metrics"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./services.scss\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Services() {\r\n  const [services, setServices] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [fullDebt, setFullDebt] = useState(0);\r\n\r\n  const updatePricing = (e) => {\r\n    let newDebt = services.debt;\r\n    let time = new Date().getTime();\r\n    let updateService = {};\r\n    if (services.active) {\r\n      newDebt += ((time - services.timeActivated) / 1000) * services.price;\r\n      updateService = {\r\n        active: !services.active,\r\n        debt: newDebt,\r\n        timeDeactivated: time\r\n      }\r\n    }\r\n    \r\n    updateService = {\r\n      active: !services.active,\r\n      timeActivated: time\r\n    }\r\n    console.log(updateService);\r\n    axios\r\n      .put(`/api/service/${services._id}`, updateService)\r\n      .then((res) => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n      });\r\n    }\r\n\r\n\r\n  //useEffect(() => {\r\n  //  const intervalId = setInterval(() => {\r\n  //    let currentDebt = pricing.reduce((a, b) => ({ debt: a.debt + b.debt }));\r\n  //    currentDebt = currentDebt.debt;\r\n  //    pricing.map((price, index) => {\r\n  //      if (price.time && price.active) {\r\n  //        currentDebt +=\r\n  //          ((new Date().getTime() - price.time) / 1000) *\r\n  //          services[index].price;\r\n  //      }\r\n  //    });\r\n  //    setFullDebt(Math.round((currentDebt + Number.EPSILON) * 100) / 100);\r\n  //  }, 5000);\r\n  //  return () => clearInterval(intervalId);\r\n  //});\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/service\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setServices(result);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return (\r\n      <div>\r\n        <h1>Services</h1>\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h1>Services</h1>\r\n        <h2>Current debt: Placeholder$</h2>\r\n        <ul>\r\n          {services.map((service, index) => (\r\n            <li key={service.name}>\r\n              <h3>{service.name}</h3>\r\n              <div className=\"content\">\r\n                <p>\r\n                  {service.description}\r\n                  <br />\r\n                  {service.metrics}\r\n                  <br />\r\n                  <br />\r\n                  {service.price} $ per hour{\" \"}\r\n                  <button onClick={updatePricing}>\r\n                    {service.active ? \"Disable\" : \"Activate\"}\r\n                  </button>\r\n                </p>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}