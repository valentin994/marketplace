{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elarvav\\\\Desktop\\\\marketplace\\\\client\\\\src\\\\components\\\\Services.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./services.scss\";\nimport axios from \"axios\";\nimport { set } from \"mongoose\";\nexport default function Services() {\n  const [services, setServices] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [fullDebt, setFullDebt] = useState(0);\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [buttonState, setButtonState] = useState([]);\n\n  const updatePricing = service => e => {\n    setButtonLoading(true);\n    let newDebt = service.debt;\n    let time = new Date().getTime();\n    let updateService = {};\n    fetch(`/api/service/${service._id}`).then(res => res.json()).then(result => {\n      switch (result) {\n        case true:\n          newDebt += (time - service.timeActivated) / 1000 * service.price;\n          updateService = {\n            active: !result,\n            debt: newDebt,\n            timeDeactivated: time\n          };\n          break;\n\n        default:\n          {\n            updateService = {\n              active: !result,\n              timeActivated: time\n            };\n          }\n      }\n\n      axios.put(`/api/service/${service._id}`, updateService).then(res => res.json).then(result => {\n        setButtonLoading(false);\n      }, error => {\n        buttonLoading(false);\n        setError(error);\n      });\n    }, error => {\n      setError(error);\n    });\n  }; //useEffect(() => {\n  //  const intervalId = setInterval(() => {\n  //    let currentDebt = pricing.reduce((a, b) => ({ debt: a.debt + b.debt }));\n  //    currentDebt = currentDebt.debt;\n  //    pricing.map((price, index) => {\n  //      if (price.time && price.active) {\n  //        currentDebt +=\n  //          ((new Date().getTime() - price.time) / 1000) *\n  //          services[index].price;\n  //      }\n  //    });\n  //    setFullDebt(Math.round((currentDebt + Number.EPSILON) * 100) / 100);\n  //  }, 5000);\n  //  return () => clearInterval(intervalId);\n  //});\n\n\n  function checkButtonState() {}\n\n  useEffect(() => {\n    console.log(buttonState);\n  });\n  useEffect(() => {\n    fetch(\"/api/service\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setServices(result);\n      result.map(service => {\n        let arr = [];\n        arr.push(service.active);\n        setButtonState(arr);\n      });\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 12\n      }\n    }, \"Error: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, \"Services\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, \"Loading...\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, \"Services\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, \"Current debt: Placeholder$\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, services.map((service, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: service.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, service.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, service.description, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }), service.metrics, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }), service.price, \" $ per hour\", \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: updatePricing(service),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 19\n      }\n    }, buttonLoading ? \"...\" : [service.active ? \"Disable\" : \"Activate\"])))))));\n  }\n}","map":{"version":3,"sources":["C:/Users/elarvav/Desktop/marketplace/client/src/components/Services.js"],"names":["React","useState","useEffect","axios","set","Services","services","setServices","isLoaded","setIsLoaded","error","setError","fullDebt","setFullDebt","buttonLoading","setButtonLoading","buttonState","setButtonState","updatePricing","service","e","newDebt","debt","time","Date","getTime","updateService","fetch","_id","then","res","json","result","timeActivated","price","active","timeDeactivated","put","checkButtonState","console","log","map","arr","push","message","index","name","description","metrics"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./services.scss\";\r\nimport axios from \"axios\";\r\nimport { set } from \"mongoose\";\r\n\r\nexport default function Services() {\r\n  const [services, setServices] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [fullDebt, setFullDebt] = useState(0);\r\n  const [buttonLoading, setButtonLoading] = useState(false);\r\n  const [buttonState, setButtonState] = useState([]);\r\n\r\n  const updatePricing = (service) => (e) => {\r\n    setButtonLoading(true);\r\n    let newDebt = service.debt;\r\n    let time = new Date().getTime();\r\n    let updateService = {};\r\n    fetch(`/api/service/${service._id}`)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          switch (result) {\r\n            case true:\r\n              newDebt +=\r\n                ((time - service.timeActivated) / 1000) * service.price;\r\n              updateService = {\r\n                active: !result,\r\n                debt: newDebt,\r\n                timeDeactivated: time,\r\n              };\r\n              break;\r\n            default: {\r\n              updateService = {\r\n                active: !result,\r\n                timeActivated: time,\r\n              };\r\n            }\r\n          }\r\n          axios\r\n            .put(`/api/service/${service._id}`, updateService)\r\n            .then((res) => res.json)\r\n            .then(\r\n              (result) => {\r\n                setButtonLoading(false);\r\n              },\r\n              (error) => {\r\n                buttonLoading(false);\r\n                setError(error);\r\n              }\r\n            );\r\n        },\r\n        (error) => {\r\n          setError(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  //useEffect(() => {\r\n  //  const intervalId = setInterval(() => {\r\n  //    let currentDebt = pricing.reduce((a, b) => ({ debt: a.debt + b.debt }));\r\n  //    currentDebt = currentDebt.debt;\r\n  //    pricing.map((price, index) => {\r\n  //      if (price.time && price.active) {\r\n  //        currentDebt +=\r\n  //          ((new Date().getTime() - price.time) / 1000) *\r\n  //          services[index].price;\r\n  //      }\r\n  //    });\r\n  //    setFullDebt(Math.round((currentDebt + Number.EPSILON) * 100) / 100);\r\n  //  }, 5000);\r\n  //  return () => clearInterval(intervalId);\r\n  //});\r\n\r\n  function checkButtonState() {}\r\n\r\n  useEffect(() => {\r\n    console.log(buttonState);\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/service\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setServices(result);\r\n          result.map((service) => {\r\n            let arr = [];\r\n            arr.push(service.active);\r\n            setButtonState(arr);\r\n          });\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return (\r\n      <div>\r\n        <h1>Services</h1>\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h1>Services</h1>\r\n        <h2>Current debt: Placeholder$</h2>\r\n        <ul>\r\n          {services.map((service, index) => (\r\n            <li key={service.name}>\r\n              <h3>{service.name}</h3>\r\n              <div className=\"content\">\r\n                <p>\r\n                  {service.description}\r\n                  <br />\r\n                  {service.metrics}\r\n                  <br />\r\n                  <br />\r\n                  {service.price} $ per hour{\" \"}\r\n                  <button onClick={updatePricing(service)}>\r\n                    {buttonLoading\r\n                      ? \"...\"\r\n                      : [service.active ? \"Disable\" : \"Activate\"]}\r\n                  </button>\r\n                </p>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}