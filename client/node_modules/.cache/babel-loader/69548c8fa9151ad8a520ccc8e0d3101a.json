{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elarvav\\\\Desktop\\\\marketplace\\\\client\\\\src\\\\components\\\\Monitoring.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chartjs from \"chart.js\";\n\nconst randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n\nconst chartConfig = {\n  type: \"bar\",\n  data: {},\n  options: {}\n};\n\nconst updateDataset = (datasetIndex, newData) => {\n  chartInstance.data.datasets[datasetIndex].data = newData;\n  chartInstance.update();\n};\n\nconst Monitoring = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const data = [randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt()];\n      updateDataset(0, data);\n    }, 5000);\n    return () => clearInterval(intervalId);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Monitoring;","map":{"version":3,"sources":["C:/Users/elarvav/Desktop/marketplace/client/src/components/Monitoring.js"],"names":["React","useEffect","useRef","useState","Chartjs","randomInt","Math","floor","random","chartConfig","type","data","options","updateDataset","datasetIndex","newData","chartInstance","datasets","update","Monitoring","chartContainer","setChartInstance","current","newChartInstance","intervalId","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,UAApB;;AAEA,MAAMC,SAAS,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAK,CAAL,GAAS,CAA1B,CAAX,IAA2C,CAAnE;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,KADY;AAElBC,EAAAA,IAAI,EAAE,EAFY;AAGlBC,EAAAA,OAAO,EAAE;AAHS,CAApB;;AAMA,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC7CC,EAAAA,aAAa,CAACL,IAAd,CAAmBM,QAAnB,CAA4BH,YAA5B,EAA0CH,IAA1C,GAAiDI,OAAjD;AACAC,EAAAA,aAAa,CAACE,MAAd;AACD,CAHH;;AAKA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,cAAc,GAAGlB,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM,CAACc,aAAD,EAAgBK,gBAAhB,IAAoClB,QAAQ,CAAC,IAAD,CAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,cAAc,IAAIA,cAAc,CAACE,OAArC,EAA8C;AAC5C,YAAMC,gBAAgB,GAAG,IAAInB,OAAJ,CAAYgB,cAAc,CAACE,OAA3B,EAAoCb,WAApC,CAAzB;AACAY,MAAAA,gBAAgB,CAACE,gBAAD,CAAhB;AACD;AACF,GALQ,EAKN,CAACH,cAAD,CALM,CAAT;AAOAnB,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMuB,UAAU,GAAGC,WAAW,CAAC,MAAI;AACjC,YAAMd,IAAI,GAAG,CACTN,SAAS,EADA,EAETA,SAAS,EAFA,EAGTA,SAAS,EAHA,EAITA,SAAS,EAJA,EAKTA,SAAS,EALA,EAMTA,SAAS,EANA,CAAb;AAQEQ,MAAAA,aAAa,CAAC,CAAD,EAAIF,IAAJ,CAAb;AACH,KAV6B,EAU3B,IAV2B,CAA9B;AAWA,WAAO,MAAMe,aAAa,CAACF,UAAD,CAA1B;AACH,GAbQ,CAAT;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,GAAG,EAAEJ,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA/BD;;AAgCA,eAAeD,UAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Chartjs from \"chart.js\";\r\n\r\nconst randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\r\n\r\nconst chartConfig = {\r\n  type: \"bar\",\r\n  data: {},\r\n  options: {},\r\n};\r\n\r\nconst updateDataset = (datasetIndex, newData) => {\r\n    chartInstance.data.datasets[datasetIndex].data = newData;\r\n    chartInstance.update();\r\n  };\r\n\r\nconst Monitoring = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (chartContainer && chartContainer.current) {\r\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n      setChartInstance(newChartInstance);\r\n    }\r\n  }, [chartContainer]);\r\n\r\n  useEffect(()=>{\r\n      const intervalId = setInterval(()=>{\r\n        const data = [\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt()\r\n          ];\r\n          updateDataset(0, data);\r\n      }, 5000);\r\n      return () => clearInterval(intervalId);\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={chartContainer} />\r\n    </div>\r\n  );\r\n};\r\nexport default Monitoring;\r\n"]},"metadata":{},"sourceType":"module"}