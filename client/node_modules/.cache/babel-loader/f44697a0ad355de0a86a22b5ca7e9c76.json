{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elarvav\\\\Desktop\\\\marketplace\\\\client\\\\src\\\\components\\\\Monitoring.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chartjs from \"chart.js\";\nimport \"./monitoring.scss\";\n\nconst randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n\nconst chartConfig = {\n  type: \"line\",\n  data: {\n    labels: [\"VM 1\"],\n    datasets: [{\n      label: \"Resource usage %\",\n      data: [{\n        x: 1,\n        y: 20\n      }, {\n        x: 2,\n        y: 10\n      }, {\n        x: 3,\n        y: 10\n      }, {\n        x: 4,\n        y: 10\n      }, {\n        x: 5,\n        y: 10\n      }, {\n        x: 6,\n        y: 10\n      }],\n      borderWidth: 1\n    }]\n  },\n  options: {\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  }\n};\n\nconst Monitoring = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer]);\n\n  const updateDataset = (datasetIndex, newData) => {\n    chartInstance.data.datasets[datasetIndex].data = newData;\n    chartInstance.update();\n  };\n\n  const onButtonClick = () => {\n    const data = [randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt()];\n    updateDataset(0, data);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Randomize!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"canvasContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Graf\")), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Monitoring;","map":{"version":3,"sources":["C:/Users/elarvav/Desktop/marketplace/client/src/components/Monitoring.js"],"names":["React","useEffect","useRef","useState","Chartjs","randomInt","Math","floor","random","chartConfig","type","data","labels","datasets","label","x","y","borderWidth","options","scales","yAxes","ticks","beginAtZero","Monitoring","chartContainer","chartInstance","setChartInstance","current","newChartInstance","updateDataset","datasetIndex","newData","update","onButtonClick"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Chartjs from \"chart.js\";\r\nimport \"./monitoring.scss\";\r\n\r\nconst randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\r\n\r\nconst chartConfig = {\r\n  type: \"line\",\r\n  data: {\r\n    labels: [\"VM 1\"],\r\n    datasets: [\r\n      {\r\n        label: \"Resource usage %\",\r\n        data: [\r\n          {\r\n            x: 1,\r\n            y: 20,\r\n          },\r\n          {\r\n            x: 2,\r\n            y: 10,\r\n          },\r\n          {\r\n            x: 3,\r\n            y: 10,\r\n          },\r\n          {\r\n            x: 4,\r\n            y: 10,\r\n          },\r\n          {\r\n            x: 5,\r\n            y: 10,\r\n          },\r\n          {\r\n            x: 6,\r\n            y: 10,\r\n          },\r\n        ],\r\n        \r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  },\r\n  options: {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nconst Monitoring = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (chartContainer && chartContainer.current) {\r\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n      setChartInstance(newChartInstance);\r\n    }\r\n  }, [chartContainer]);\r\n\r\n  const updateDataset = (datasetIndex, newData) => {\r\n    chartInstance.data.datasets[datasetIndex].data = newData;\r\n    chartInstance.update();\r\n  };\r\n\r\n  const onButtonClick = () => {\r\n    const data = [\r\n      randomInt(),\r\n      randomInt(),\r\n      randomInt(),\r\n      randomInt(),\r\n      randomInt(),\r\n      randomInt(),\r\n    ];\r\n    updateDataset(0, data);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={onButtonClick}>Randomize!</button>\r\n      <div className=\"canvasContainer\">\r\n        <p className=\"mon\">Graf</p>\r\n      </div>\r\n      <canvas ref={chartContainer} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Monitoring;\r\n"]},"metadata":{},"sourceType":"module"}