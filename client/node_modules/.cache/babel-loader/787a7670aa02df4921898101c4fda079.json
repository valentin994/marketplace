{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elarvav\\\\Desktop\\\\marketplace\\\\client\\\\src\\\\components\\\\Monitoring.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chartjs from \"chart.js\";\nimport \"./monitoring.scss\";\n\nconst randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n\nconst chartConfig = {\n  type: \"line\",\n  data: {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    datasets: [{\n      label: \"Resource usage %\",\n      data: [randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt()],\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"],\n      borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\"],\n      fill: false,\n      borderWidth: 1\n    }, {\n      label: \"My Second dataset\",\n      fill: false,\n      data: [randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt()]\n    }]\n  },\n  options: {\n    responsive: true,\n    title: {\n      display: true,\n      text: \"Some Random Title\"\n    },\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  }\n};\n\nconst Monitoring = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer]); //const updateDataset = (datasetIndex, newData) => {\n  //  chartInstance.data.datasets[datasetIndex].data = newData;\n  //  chartInstance.update();\n  //};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Monitoring;","map":{"version":3,"sources":["C:/Users/elarvav/Desktop/marketplace/client/src/components/Monitoring.js"],"names":["React","useEffect","useRef","useState","Chartjs","randomInt","Math","floor","random","chartConfig","type","data","labels","datasets","label","backgroundColor","borderColor","fill","borderWidth","options","responsive","title","display","text","scales","yAxes","ticks","beginAtZero","Monitoring","chartContainer","chartInstance","setChartInstance","current","newChartInstance"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,mBAAP;;AAEA,MAAMC,SAAS,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAK,CAAL,GAAS,CAA1B,CAAX,IAA2C,CAAnE;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,MADY;AAElBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CACN,SADM,EAEN,UAFM,EAGN,OAHM,EAIN,OAJM,EAKN,KALM,EAMN,MANM,EAON,MAPM,EAQN,QARM,EASN,WATM,EAUN,SAVM,EAWN,UAXM,EAYN,UAZM,CADJ;AAeJC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,kBADT;AAEEH,MAAAA,IAAI,EAAE,CACJN,SAAS,EADL,EAEJA,SAAS,EAFL,EAGJA,SAAS,EAHL,EAIJA,SAAS,EAJL,EAKJA,SAAS,EALL,EAMJA,SAAS,EANL,EAOJA,SAAS,EAPL,EAQJA,SAAS,EARL,EASJA,SAAS,EATL,EAUJA,SAAS,EAVL,EAWJA,SAAS,EAXL,EAYJA,SAAS,EAZL,CAFR;AAgBEU,MAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,yBAJe,EAKf,0BALe,EAMf,yBANe,CAhBnB;AAwBEC,MAAAA,WAAW,EAAE,CACX,uBADW,EAEX,uBAFW,EAGX,uBAHW,EAIX,uBAJW,EAKX,wBALW,EAMX,uBANW,CAxBf;AAgCEC,MAAAA,IAAI,EAAE,KAhCR;AAiCEC,MAAAA,WAAW,EAAE;AAjCf,KADQ,EAoCR;AACEJ,MAAAA,KAAK,EAAE,mBADT;AAEEG,MAAAA,IAAI,EAAE,KAFR;AAGEN,MAAAA,IAAI,EAAE,CACJN,SAAS,EADL,EAEJA,SAAS,EAFL,EAGJA,SAAS,EAHL,EAIJA,SAAS,EAJL,EAKJA,SAAS,EALL,EAMJA,SAAS,EANL,EAOJA,SAAS,EAPL,EAQJA,SAAS,EARL,EASJA,SAAS,EATL,EAUJA,SAAS,EAVL,EAWJA,SAAS,EAXL,EAYJA,SAAS,EAZL;AAHR,KApCQ;AAfN,GAFY;AAyElBc,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE,IADL;AAEPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,IAAI,EAAE;AAFD,KAFA;AAMPC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,WAAW,EAAE;AADR;AADT,OADK;AADD;AAND;AAzES,CAApB;;AA2FA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,cAAc,GAAG3B,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM,CAAC4B,aAAD,EAAgBC,gBAAhB,IAAoC5B,QAAQ,CAAC,IAAD,CAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI4B,cAAc,IAAIA,cAAc,CAACG,OAArC,EAA8C;AAC5C,YAAMC,gBAAgB,GAAG,IAAI7B,OAAJ,CAAYyB,cAAc,CAACG,OAA3B,EAAoCvB,WAApC,CAAzB;AACAsB,MAAAA,gBAAgB,CAACE,gBAAD,CAAhB;AACD;AACF,GALQ,EAKN,CAACJ,cAAD,CALM,CAAT,CAJuB,CAWvB;AACA;AACA;AACA;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,GAAG,EAAEA,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CArBD;;AAuBA,eAAeD,UAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Chartjs from \"chart.js\";\r\nimport \"./monitoring.scss\";\r\n\r\nconst randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\r\n\r\nconst chartConfig = {\r\n  type: \"line\",\r\n  data: {\r\n    labels: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n    datasets: [\r\n      {\r\n        label: \"Resource usage %\",\r\n        data: [\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n        ],\r\n        backgroundColor: [\r\n          \"rgba(255, 99, 132, 0.2)\",\r\n          \"rgba(54, 162, 235, 0.2)\",\r\n          \"rgba(255, 206, 86, 0.2)\",\r\n          \"rgba(75, 192, 192, 0.2)\",\r\n          \"rgba(153, 102, 255, 0.2)\",\r\n          \"rgba(255, 159, 64, 0.2)\",\r\n        ],\r\n        borderColor: [\r\n          \"rgba(255, 99, 132, 1)\",\r\n          \"rgba(54, 162, 235, 1)\",\r\n          \"rgba(255, 206, 86, 1)\",\r\n          \"rgba(75, 192, 192, 1)\",\r\n          \"rgba(153, 102, 255, 1)\",\r\n          \"rgba(255, 159, 64, 1)\",\r\n        ],\r\n        fill: false,\r\n        borderWidth: 1,\r\n      },\r\n      {\r\n        label: \"My Second dataset\",\r\n        fill: false,\r\n        data: [\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n          randomInt(),\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  options: {\r\n    responsive: true,\r\n    title: {\r\n      display: true,\r\n      text: \"Some Random Title\",\r\n    },\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nconst Monitoring = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (chartContainer && chartContainer.current) {\r\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n      setChartInstance(newChartInstance);\r\n    }\r\n  }, [chartContainer]);\r\n\r\n  //const updateDataset = (datasetIndex, newData) => {\r\n  //  chartInstance.data.datasets[datasetIndex].data = newData;\r\n  //  chartInstance.update();\r\n  //};\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={chartContainer} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Monitoring;\r\n"]},"metadata":{},"sourceType":"module"}